// QueueDisplay.jsx - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–æ–π –ø—Ä–æ–≥—Ä–∞–º–º

import React, { useState, useEffect, useRef } from 'react';
import { queueAPI, publicAPI } from '../../api';
import { useTranslation } from 'react-i18next';
import { getProgramCategoryFromArray, getProgramColors } from '../../utils/programColors';
import AudioPlayer from '../../components/AudioPlayer/AudioPlayer';
import './QueueDisplay.css';

const QueueDisplay = () => {
  const { t } = useTranslation();
  const [queueEntries, setQueueEntries] = useState([]);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [videoSettings, setVideoSettings] = useState({
    youtube_url: '',
    is_enabled: false
  });
  const [isAnnouncementPlaying, setIsAnnouncementPlaying] = useState(false);
  const [currentAnnouncement, setCurrentAnnouncement] = useState(null);

  // –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
  const iframeRef = useRef(null);
  const audioContextRef = useRef(null);
  const gainNodeRef = useRef(null);
  const processedAnnouncementsRef = useRef(new Set());

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è YouTube ID –∏–∑ URL
  const extractYouTubeId = (url) => {
    if (!url) return null;
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
    const match = url.match(regExp);
    return (match && match[2].length === 11) ? match[2] : null;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–∏
  const fetchQueueData = async () => {
    try {
      setLoading(true);
      const response = await queueAPI.getDisplayQueue();
      setQueueEntries(response.data);
      setError(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–∏:', error);
      setError(t('queueDisplay.loadError'));
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ
  const fetchVideoSettings = async () => {
    try {
      const response = await publicAPI.getVideoSettings();
      setVideoSettings(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ:', error);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web Audio API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
  const setupAudioContext = () => {
    try {
      if (!audioContextRef.current && window.AudioContext) {
        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();
        gainNodeRef.current = audioContextRef.current.createGain();
        gainNodeRef.current.connect(audioContextRef.current.destination);
        console.log('üéµ Audio Context –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Audio Context:', error);
    }
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ JavaScript
  const controlVideoVolume = (shouldMute) => {
    // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ postMessage
    if (iframeRef.current) {
      try {
        const iframe = iframeRef.current;
        const volume = shouldMute ? 10 : 100;
        iframe.contentWindow?.postMessage(
          `{"event":"command","func":"setVolume","args":[${volume}]}`,
          'https://www.youtube.com'
        );

        console.log(`üîä –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å: ${volume}%`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ postMessage:', error);
      }
    }

    // –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DOM
    try {
      const allVideos = document.querySelectorAll('video');
      allVideos.forEach(video => video.volume = shouldMute ? 0.15 : 1.0);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è video —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:', error);
    }

    // –ú–µ—Ç–æ–¥ 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Web Audio API
    if (gainNodeRef.current) {
      try {
        gainNodeRef.current.gain.value = shouldMute ? 0.15 : 1.0;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Web Audio API:', error);
      }
    }
  };

  // **–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø**: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ localStorage
  const checkForNewAnnouncements = () => {
    try {
      const storedAnnouncement = localStorage.getItem('currentAnnouncement');
      if (storedAnnouncement) {
        const announcement = JSON.parse(storedAnnouncement);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if (!processedAnnouncementsRef.current.has(announcement.audioId)) {
          console.log('üîä QueueDisplay: –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', announcement);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
          processedAnnouncementsRef.current.add(announcement.audioId);
          
          // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
          setCurrentAnnouncement(announcement);
          setIsAnnouncementPlaying(true);
          controlVideoVolume(true);
          
          // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
          if (processedAnnouncementsRef.current.size > 10) {
            const array = Array.from(processedAnnouncementsRef.current);
            processedAnnouncementsRef.current = new Set(array.slice(-10));
          }
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
    }
  };

  // **–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø**: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
  const handleAnnouncementEnded = () => {
    console.log('üèÅ QueueDisplay: –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å');
    setCurrentAnnouncement(null);
    setIsAnnouncementPlaying(false);
    controlVideoVolume(false);
  };

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage
  useEffect(() => {
    let lastTimestamp = 0;

    const handleStorageChange = (e) => {
      if (e.key === 'announcementStatus') {
        const status = JSON.parse(e.newValue || '{}');
        if (status.timestamp && Math.abs(status.timestamp - lastTimestamp) < 100) return;
        lastTimestamp = status.timestamp;

        console.log('üì¢ –°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', status.isPlaying ? '–ù–ê–ß–ê–õ–û–°–¨' : '–ó–ê–ö–û–ù–ß–ò–õ–û–°–¨');

        setIsAnnouncementPlaying(status.isPlaying);
        controlVideoVolume(status.isPlaying);
      }
      
      // **–ù–û–í–û–ï**: –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
      if (e.key === 'currentAnnouncement') {
        checkForNewAnnouncements();
      }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Audio Context
    setupAudioContext();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è localStorage
    window.addEventListener('storage', handleStorageChange);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const currentStatus = localStorage.getItem('announcementStatus');
    if (currentStatus) {
      try {
        const status = JSON.parse(currentStatus);
        setIsAnnouncementPlaying(status.isPlaying || false);
        controlVideoVolume(status.isPlaying || false);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞:', e);
      }
    }

    // **–ù–û–í–û–ï**: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkForNewAnnouncements();

    return () => window.removeEventListener('storage', handleStorageChange);
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    fetchQueueData();
    fetchVideoSettings();

    const interval = setInterval(() => {
      fetchQueueData();
      fetchVideoSettings();
      setCurrentTime(new Date());
      
      // **–ù–û–í–û–ï**: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      checkForNewAnnouncements();
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  // –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–∞–º–º –∑–∞—è–≤–∫–∏
  const getCardColorClassByPrograms = (entry) => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –≤ entry
    if (entry.programs && entry.programs.length > 0) {
      const programCategory = getProgramCategoryFromArray(entry.programs);
      const programColors = getProgramColors(entry.programs);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∏–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∞ –Ω–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      switch (programCategory) {
        case 'bachelor':
          return 'card-blue'; // –°–∏–Ω–∏–π –¥–ª—è –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞
        case 'master':
          return 'card-green'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
        case 'doctorate':
          return 'card-purple'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä—ã
        default:
          return 'card-blue'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏–Ω–∏–π
      }
    }
    
    // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
    return getCardColorClass(entry.employee_status);
  };

  const getCardTextColorClassByPrograms = (entry) => {
    if (entry.programs && entry.programs.length > 0) {
      const programCategory = getProgramCategoryFromArray(entry.programs);
      
      switch (programCategory) {
        case 'bachelor':
          return 'text-blue';
        case 'master':
          return 'text-green';
        case 'doctorate':
          return 'text-purple';
        default:
          return 'text-blue';
      }
    }
    
    // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
    return getCardTextColorClass(entry.employee_status);
  };

  // –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const getCardColorClass = (status) => {
    switch (status) {
      case 'available': return 'card-blue';
      case 'paused': return 'card-green';
      case 'busy': return 'card-purple';
      default: return 'card-blue';
    }
  };

  const getCardTextColorClass = (status) => {
    switch (status) {
      case 'available': return 'text-blue';
      case 'paused': return 'text-green';
      case 'busy': return 'text-purple';
      default: return 'text-blue';
    }
  };

  const videoId = extractYouTubeId(videoSettings.youtube_url);

  return (
    <div className="queue-display">
      <header className="display-header">
        <div className="header-texts">
          <h1 className="main-title">–≠–õ–ï–ö–¢–†–û–ù–ù–ê–Ø –û–ß–ï–†–ï–î–¨</h1>
          <h2 className="sub-title">–ü–†–ò–ï–ú–ù–û–ô –ö–û–ú–ò–°–°–ò–ò MNU</h2>
          <div className="wait-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –≤—ã–∑–æ–≤–∞ –≤–∞—à–µ–≥–æ —Ç–∞–ª–æ–Ω–∞.</div>
        </div>
        <img src="/logo_blue.svg" alt="MNU Logo" className="fixed-logo" />
      </header>

      <div className="queue-entries">
        {queueEntries.map((entry) => {
          // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
          const colorClass = getCardColorClassByPrograms(entry);
          const textColorClass = getCardTextColorClassByPrograms(entry);
          
          return (
            <div key={entry.id} className={`queue-card ${colorClass}`}>
              <div className="queue-card-header">
                <div className={`queue-label ${textColorClass}`}>‚Ññ –¢–ê–õ–û–ù–ê</div>
                <div className={`desk-label ${textColorClass}`}>‚Ññ –ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê</div>
              </div>
              <div className="queue-card-values">
                <div className={`queue-number ${textColorClass}`}>{entry.queue_number}</div>
                <div className="divider"></div>
                <div className="desk-info">
                  <div className={`desk-number ${textColorClass}`}>{entry.employee_desk}</div>
                  <div className={`consultant-name ${textColorClass}`} style={{ textTransform: 'uppercase' }}>
                    {entry.assigned_employee_name}
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <div className="fixed-time">
        {currentTime.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        })}
      </div>

      {videoSettings.is_enabled && videoId && (
        <div className="video-section" style={{ alignSelf: 'flex-end', marginTop: 'auto' }}>
          <div className="video-container">
            <iframe
              ref={iframeRef}
              src={`https://www.youtube.com/embed/${videoId}?autoplay=1&mute=0&loop=1&playlist=${videoId}&controls=0&showinfo=0&rel=0&modestbranding=1&enablejsapi=1`}
              title="Information Video"
              frameBorder="0"
              allow="autoplay; encrypted-media"
              allowFullScreen
            ></iframe>
          </div>
        </div>
      )}

      {/* **–ù–û–í–û–ï**: –ê—É–¥–∏–æ–ø–ª–µ–µ—Ä –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ display —Å—Ç—Ä–∞–Ω–∏—Ü–µ */}
      {currentAnnouncement && currentAnnouncement.audioBase64 && (
        <AudioPlayer
          key={currentAnnouncement.audioId}
          audioBase64={currentAnnouncement.audioBase64}
          onEnded={handleAnnouncementEnded}
          autoPlay={true}
        />
      )}
    </div>
  );
};

export default QueueDisplay;