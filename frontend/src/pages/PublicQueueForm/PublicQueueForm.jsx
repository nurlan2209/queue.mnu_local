import React, { useState, useEffect } from 'react';
import { FaUser, FaPhoneAlt, FaGraduationCap } from 'react-icons/fa'; // –£–±–∏—Ä–∞–µ–º FaStar
import { useRecaptcha } from '../../hooks/useRecaptcha';
import { createQueueEntry, queueAPI } from '../../api'; // –£–±–∏—Ä–∞–µ–º getEmployees
import QueueTicket from '../../components/QueueTicket/QueueTicket';
import { useTranslation } from 'react-i18next';
import './PublicQueueForm.css';

const RECAPTCHA_SITE_KEY = "6LfOR0orAAAAAN7I_8_LpEJ0Ymu4ZDwPk5XZALN1";

const BACHELOR_PROGRAMS = [
  'accounting',
  'appliedLinguistics',
  'economicsDataScience',
  'finance',
  'hospitality',
  'internationalJournalism',
  'internationalLaw',
  'internationalRelations',
  'it',
  'jurisprudence',
  'management',
  'marketing',
  'psychology',
  'tourism',
  'translation',
];

const MASTER_PROGRAMS = [
  'politicalInternationalRelations',
  'appliedLinguistics',
  'competitionLaw',
  'consultingPsychology',
  'economics',
  'finance',
  'intellectualPropertyLaw',
  'internationalLaw',
  'itLaw',
  'jurisprudence',
  'translation',
];

const DOCTORATE_PROGRAMS = ['law', 'phdEconomics'];

const PublicQueueForm = () => {
  const { t, i18n } = useTranslation();
  const { isReady, isLoading, executeRecaptcha } = useRecaptcha(RECAPTCHA_SITE_KEY);
  
  // –£–ë–ò–†–ê–ï–ú assigned_employee_name –∏–∑ formData
  const [formData, setFormData] = useState({
    full_name: '',
    phone: '+7',
    program: '',
    notes: '',
    captcha_token: null,
    form_language: i18n.language
  });
  
  // –£–ë–ò–†–ê–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
  // const [employees, setEmployees] = useState([]);
  // const [employeeDropdownOpen, setEmployeeDropdownOpen] = useState(false);
  
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const [queueCount, setQueueCount] = useState(null);
  const [ticket, setTicket] = useState(null);
  const [categoryStates, setCategoryStates] = useState({
    bachelor: false,
    master: false,
    doctorate: false,
  }); 

  const formatPhoneNumber = (value) => {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ + –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    let digitsOnly = value.replace(/\D/g, '');
    
    // –î–æ–±–∞–≤–ª—è–µ–º 7 –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8
    if (!digitsOnly.startsWith('7')) {
      digitsOnly = '7' + digitsOnly.substring(digitsOnly.startsWith('8') ? 1 : 0);
    }
    digitsOnly = digitsOnly.substring(0, 11);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –º–∞—Å–∫–æ–π
    let formattedNumber = '+7';
    
    if (digitsOnly.length > 1) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≥–æ—Ä–æ–¥–∞/–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
      const areaCode = digitsOnly.substring(1, Math.min(4, digitsOnly.length));
      formattedNumber += ' (' + areaCode;
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É –ø–æ—Å–ª–µ –∫–æ–¥–∞ –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ –∫–æ–¥ –ø–æ–ª–Ω—ã–π
      if (digitsOnly.length >= 4) {
        formattedNumber += ')';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞
        if (digitsOnly.length > 4) {
          formattedNumber += ' ' + digitsOnly.substring(4, Math.min(7, digitsOnly.length));
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ—Ñ–∏—Å –∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã
          if (digitsOnly.length > 7) {
            formattedNumber += '-' + digitsOnly.substring(7, Math.min(9, digitsOnly.length));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –¥–µ—Ñ–∏—Å –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã
            if (digitsOnly.length > 9) {
              formattedNumber += '-' + digitsOnly.substring(9, 11);
            }
          }
        }
      }
    }
    
    return formattedNumber;
  };

  const handlePhoneChange = (e) => {
    const formattedValue = formatPhoneNumber(e.target.value);
    setFormData({ ...formData, phone: formattedValue });
  };

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–ª–æ–Ω –≤ localStorage
    const savedTicket = localStorage.getItem('queueTicket');
    if (savedTicket) {
      try {
        const parsedTicket = JSON.parse(savedTicket);
        setTicket(parsedTicket);
        setSuccess(true);
      } catch {
        localStorage.removeItem('queueTicket');
      }
    }
    
    // –£–ë–ò–†–ê–ï–ú –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    // getEmployees().then(setEmployees).catch(() => setError(t('publicQueueForm.employeeLoadError')));
    
    queueAPI.getQueueCount().then((res) => setQueueCount(res.data.count)).catch(() => setQueueCount(null));
  }, [t]);

  // –£–ë–ò–†–ê–ï–ú —Ñ—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
  // const getEmployeeStatusText = (status) => { ... }
  // const renderStatusBadge = (status) => { ... }

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleProgramChange = (e) => {
    const { value } = e.target;
    setFormData({ ...formData, program: value });
    // –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    setCategoryStates({
      bachelor: false,
      master: false,
      doctorate: false,
    });
  };

  const toggleCategory = (category) => {
    setCategoryStates({ ...categoryStates, [category]: !categoryStates[category] });
  };

  const getProgramCategory = (program) => {
    if (BACHELOR_PROGRAMS.includes(program)) return 'bachelor';
    if (MASTER_PROGRAMS.includes(program)) return 'master';
    if (DOCTORATE_PROGRAMS.includes(program)) return 'doctorate';
    return '';
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!isReady) {
      setError('reCAPTCHA –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º reCAPTCHA v3
      const captchaToken = await executeRecaptcha('submit_queue_form');
      
      if (!captchaToken) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É reCAPTCHA.');
        setLoading(false);
        return;
      }

      // –£–ë–ò–†–ê–ï–ú assigned_employee_name –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const dataToSend = {
        full_name: formData.full_name,
        phone: formData.phone,
        programs: [formData.program], // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤
        notes: formData.notes || '',
        // –ù–ï –û–¢–ü–†–ê–í–õ–Ø–ï–ú assigned_employee_name - —Å–µ—Ä–≤–µ—Ä –Ω–∞–∑–Ω–∞—á–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        captcha_token: captchaToken,
        form_language: i18n.language
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', dataToSend);
      
      const response = await createQueueEntry(dataToSend);
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∞–ª–æ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      const basicTicketData = {
        ...response,
        full_name: formData.full_name,
        phone: formData.phone,
        programs: [formData.program],
        assigned_employee_name: response.assigned_employee_name, // –ü–æ–ª—É—á–∞–µ–º –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        form_language: i18n.language,
        created_at: new Date().toISOString()
      };

      console.log('üé´ –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∞–ª–æ–Ω:', basicTicketData);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
      try {
        const queueStatus = await queueAPI.checkQueueByName(formData.full_name);
        
        const enhancedTicketData = {
          ...basicTicketData,
          ...queueStatus.data
        };
        
        setTicket(enhancedTicketData);
        localStorage.setItem('queueTicket', JSON.stringify(enhancedTicketData));
        
      } catch (checkError) {
        setTicket(basicTicketData);
        localStorage.setItem('queueTicket', JSON.stringify(basicTicketData));
      }
      
      setSuccess(true);
      
      // –£–ë–ò–†–ê–ï–ú assigned_employee_name –∏–∑ —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
      setFormData({
        full_name: '',
        phone: '+7',
        program: '',
        notes: '',
        captcha_token: null,
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –æ—á–µ—Ä–µ–¥–∏
      queueAPI.getQueueCount()
        .then((response) => {
          setQueueCount(response.data.count);
        })
        .catch((err) => {
          setQueueCount(null);
        });
        
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', err);
      const errorMessage = err.response?.data?.detail || t('publicQueueForm.error');
      console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', errorMessage);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  if (success && ticket) {
    return (
      <div className="public-form-container">
        <QueueTicket 
          ticket={ticket} 
          onReturn={() => {
            setSuccess(false);
            setTicket(null);
            localStorage.removeItem('queueTicket');
          }} 
        />
      </div>
    );
  } else if (success && !ticket) {
    return (
      <div className="public-form-container">
        <div className="success-message">
          <h2>{t('publicQueueForm.successTitle')}</h2>
          <p>{t('publicQueueForm.successMessage')}</p>
          {queueCount !== null && (
            <p>
              {t('publicQueueForm.queuePosition')}{' '}
              <strong>{queueCount}</strong>
            </p>
          )}
          <button
            className="btn btn-primary"
            onClick={() => {
              setSuccess(false);
            }}
            style={{ marginTop: '1rem' }}
          >
            {t('publicQueueForm.backButton')}
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`public-form-container ${categoryStates.bachelor || categoryStates.master || categoryStates.doctorate ? 'modal-active' : ''}`}>
      <h1 className="form-title-main" style={{ color: '#1A2D6B' }}>{t('publicQueueForm.title')}</h1>
      <p className="form-description">{t('publicQueueForm.description')}</p>
      {error && <div className="alert alert-danger">{error}</div>}
      {isLoading && <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã...</p>}
      <form onSubmit={handleSubmit} className="public-queue-form">
        
        {/* –ü–æ–ª–µ –§–ò–û */}
        <div className="form-group">
          <div className="input-wrapper">
            <FaUser className="field-icon" />
            <input 
              type="text" 
              id="full_name" 
              name="full_name" 
              value={formData.full_name} 
              onChange={handleChange} 
              placeholder={t('publicQueueForm.fullNameLabel')} 
              required 
            />
          </div>
        </div>
        
        {/* –ü–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */}
        <div className="form-group">
          <div className="input-wrapper">
            <FaPhoneAlt className="field-icon" />
            <input 
              type="tel" 
              id="phone" 
              name="phone" 
              value={formData.phone} 
              onChange={handlePhoneChange} 
              placeholder={t('publicQueueForm.phoneLabel')} 
              required 
            />
          </div>
        </div>
        
        {/* –£–ë–ò–†–ê–ï–ú –í–ï–°–¨ –ë–õ–û–ö –í–´–ë–û–†–ê –°–û–¢–†–£–î–ù–ò–ö–ê */}
        {/*
        <div className="form-group">
          <div className="employee-selector">
            ...
          </div>
        </div>
        */}

        {/* –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã - –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
        <div className="form-group">
          <label className="field-label">
            <FaGraduationCap className="field-icon" />
            {t('publicQueueForm.programsLabel')}
          </label>
          
          {/* –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É */}
          {formData.program && (
            <div className="selected-program">
              ‚úì {t(`publicQueueForm.programs.${getProgramCategory(formData.program)}.${formData.program}`)}
            </div>
          )}
          
          <div className="programs-list">
            {['bachelor', 'master', 'doctorate'].map((cat) => (
              <React.Fragment key={cat}>
                <div className={`category-header ${cat}`} onClick={() => toggleCategory(cat)}>
                  <h3 className="program-category">{t(`publicQueueForm.${cat}`)}</h3>
                  <span className={`toggle-icon ${categoryStates[cat] ? 'expanded' : ''}`}>{categoryStates[cat] ? '‚àí' : '+'}</span>
                </div>
                {categoryStates[cat] && (
                  <div className={`category-content ${cat}`}>
                    {(cat === 'bachelor' ? BACHELOR_PROGRAMS : cat === 'master' ? MASTER_PROGRAMS : DOCTORATE_PROGRAMS).map((program) => (
                      <div className="program-item" key={program}>
                        <input 
                          type="radio" 
                          id={`program-${program}`} 
                          name="program" 
                          value={program} 
                          checked={formData.program === program} 
                          onChange={handleProgramChange} 
                        />
                        <label htmlFor={`program-${program}`}>{t(`publicQueueForm.programs.${cat}.${program}`)}</label>
                      </div>
                    ))}
                  </div>
                )}
              </React.Fragment>
            ))}
          </div>
        </div>

        <div className="recaptcha-notice">
          <small>
            {t('publicQueueForm.recaptcha.notice')}
            <a href="https://policies.google.com/privacy" target="_blank" rel="noopener noreferrer">{t('publicQueueForm.recaptcha.privacyPolicy')}</a>{' '}
            {t('publicQueueForm.recaptcha.and')}{' '}
            <a href="https://policies.google.com/terms" target="_blank" rel="noopener noreferrer">{t('publicQueueForm.recaptcha.termsOfService')}</a>{' '}
            {t('publicQueueForm.recaptcha.google')}
          </small>
        </div>

        <button 
          type="submit" 
          className="btn btn-submit" 
          disabled={loading || !isReady}
        >
          {loading ? t('publicQueueForm.submitting') : t('publicQueueForm.submitButton')}
        </button>
      </form>
    </div>
  );
};

export default PublicQueueForm;