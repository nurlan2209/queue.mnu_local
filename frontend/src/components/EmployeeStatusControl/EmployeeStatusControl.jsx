import React, { useState, useEffect, useRef } from 'react';
import { admissionAPI } from '../../api';
import { useTranslation } from 'react-i18next';
import AudioPlayer from '../AudioPlayer/AudioPlayer';
import './EmployeeStatusControl.css';

const EmployeeStatusControl = () => {
  const { t } = useTranslation();
  const [status, setStatus] = useState(null);
  const [loading, setLoading] = useState(true);
  const [actionLoading, setActionLoading] = useState(false);
  const [error, setError] = useState(null);
  const [calledApplicant, setCalledApplicant] = useState(null);
  const [audioData, setAudioData] = useState(null);
  
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—É–¥–∏–æ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª–æ—Å—å –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
  const audioIdRef = useRef(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const fetchEmployeeStatus = async () => {
    try {
      setLoading(true);
      const response = await admissionAPI.getStatus();
      setStatus(response.data);
      setError(null);
    } catch (error) {
      console.error('Error fetching employee status:', error);
      setError(t('employeeStatus.errorLoading'));
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchEmployeeStatus();
    
    // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 30 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã —Ä–µ–∂–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è
    const interval = setInterval(fetchEmployeeStatus, 30000);
    return () => clearInterval(interval);
  }, []);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º
  const handleStartWork = async () => {
    try {
      setActionLoading(true);
      const response = await admissionAPI.startWork();
      setStatus(response.data);
      setError(null);
      
      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –í–´–ó–´–í–ê–ï–ú –ü–ï–†–í–û–ì–û –ê–ë–ò–¢–£–†–ò–ï–ù–¢–ê –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
      setTimeout(() => {
        handleCallNext();
      }, 500);
    } catch (error) {
      setError(t('employeeStatus.errorStarting'));
    } finally {
      setActionLoading(false);
    }
  };

  const handlePauseWork = async () => {
    try {
      setActionLoading(true);
      const response = await admissionAPI.pauseWork();
      setStatus(response.data);
      setError(null);
    } catch (error) {
      setError(t('employeeStatus.errorPausing'));
    } finally {
      setActionLoading(false);
    }
  };

  const handleResumeWork = async () => {
    try {
      setActionLoading(true);  
      const response = await admissionAPI.resumeWork();
      setStatus(response.data);
      setError(null);
      
      // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –í–´–ó–´–í–ê–ï–ú –°–õ–ï–î–£–Æ–©–ï–ì–û –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
      setTimeout(() => {
        handleCallNext();
      }, 500);
    } catch (error) {
      setError(t('employeeStatus.errorResuming'));
    } finally {
      setActionLoading(false);
    }
  };

  const handleCallNext = async () => {
    console.log('üöÄ –í—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞');
    try {
      setActionLoading(true);
      const response = await admissionAPI.callNext();
      
      console.log('üîç –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ –û–¢ API:', response.data);
      
      if (response.data.success === false) {
        console.log('üìù –ù–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏');
        setError(response.data.message);
        setCalledApplicant(null);
      } else {
        console.log('üë§ –ù–∞–π–¥–µ–Ω –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç:', response.data.full_name);
        setCalledApplicant(response.data);
        setError(null);
        
        // –°–†–ê–ó–£ –ú–ï–ù–Ø–ï–ú –õ–û–ö–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –ù–ê BUSY
        setStatus(prevStatus => ({ ...prevStatus, status: 'busy' }));
        
        // üì° –£–í–ï–î–û–ú–õ–Ø–ï–ú –î–†–£–ì–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        window.dispatchEvent(new CustomEvent('queueUpdated'));
        
        console.log('üé§ –†–ï–ß–ï–í–´–ï –î–ê–ù–ù–´–ï:', response.data.speech);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∏—Ö
        if (response.data.speech && response.data.speech.success) {
          console.log('üîä –ê–£–î–ò–û BASE64 –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä:', response.data.speech.audio_base64?.length);
          console.log('üìù –¢–ï–ö–°–¢ –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:', response.data.speech.text);
          
          // –°–û–ó–î–ê–ï–ú –£–ù–ò–ö–ê–õ–¨–ù–´–ô ID –¥–ª—è —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ
          audioIdRef.current = Date.now().toString();
          const audioInfo = {
            ...response.data.speech,
            audioId: audioIdRef.current
          };
          
          setAudioData(audioInfo);

          // **–ù–û–í–û–ï**: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ localStorage –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
          try {
            localStorage.setItem('currentAnnouncement', JSON.stringify({
              audioBase64: response.data.speech.audio_base64,
              text: response.data.speech.text,
              language: response.data.speech.language,
              timestamp: Date.now(),
              audioId: audioIdRef.current,
              queueNumber: response.data.queue_number,
              employeeName: response.data.assigned_employee_name,
              desk: response.data.employee_desk
            }));
            console.log('üíæ –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü');
          } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ localStorage:', e);
          }
        } else {
          console.log('‚ùå –ù–ï–¢ –ê–£–î–ò–û –î–ê–ù–ù–´–• –ò–õ–ò –û–®–ò–ë–ö–ê:', response.data.speech);
        }
      }
    } catch (error) {
      console.error('üí• –û–®–ò–ë–ö–ê –í handleCallNext:', error);
      setError(t('employeeStatus.errorCallingNext'));
    } finally {
      setActionLoading(false);
    }
  };

  const handleCompleteApplicant = async () => {
    try {
      setActionLoading(true);
      const response = await admissionAPI.completeCurrentApplicant();
      setStatus(response.data);
      setCalledApplicant(null);
      setAudioData(null);
      audioIdRef.current = null;
      
      // **–ù–û–í–û–ï**: –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      localStorage.removeItem('currentAnnouncement');
      
      setError(null);
      
      // üîÑ –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–†–ê–ù–ò–¶–£ –°–¢–ê–¢–£–°–ê
      await fetchEmployeeStatus();
      
      // üì° –£–í–ï–î–û–ú–õ–Ø–ï–ú –î–†–£–ì–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      window.dispatchEvent(new CustomEvent('queueUpdated'));
      
      // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –í–´–ó–´–í–ê–ï–ú –°–õ–ï–î–£–Æ–©–ï–ì–û –ê–ë–ò–¢–£–†–ò–ï–ù–¢–ê 
      // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ù–ï –Ω–∞ –ø–∞—É–∑–µ
      if (response.data.status === 'available') {
        console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞');
        setTimeout(() => {
          handleCallNext();
        }, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      } else {
        console.log('‚è∏Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞ –ø–∞—É–∑–µ, –∞–≤—Ç–æ–≤—ã–∑–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω');
      }
    } catch (error) {
      setError(t('employeeStatus.errorCompleting'));
    } finally {
      setActionLoading(false);
    }
  };

  const handleFinishWork = async () => {
    try {
      setActionLoading(true);
      const response = await admissionAPI.finishWork();
      setStatus(response.data);
      setCalledApplicant(null);
      setAudioData(null);
      audioIdRef.current = null;
      
      // **–ù–û–í–û–ï**: –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      localStorage.removeItem('currentAnnouncement');
      
      setError(null);
    } catch (error) {
      setError(t('employeeStatus.errorCompleting'));
    } finally {
      setActionLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
  const handleAudioEnded = () => {
    setAudioData(null);
    audioIdRef.current = null;
    
    // **–ù–û–í–û–ï**: –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    setTimeout(() => {
      localStorage.removeItem('currentAnnouncement');
    }, 1000);
  };

  if (loading) {
    return <div className="employee-status-loading">{t('employeeStatus.loading')}</div>;
  }

  if (!status) {
    return <div className="employee-status-error">{t('employeeStatus.errorLoading')}</div>;
  }

  const getStatusText = (statusValue) => {
    const statusMap = {
      'available': t('employeeStatus.available'),
      'busy': t('employeeStatus.busy'),
      'paused': t('employeeStatus.paused'),
      'offline': t('employeeStatus.offline')
    };
    return statusMap[statusValue] || t('employeeStatus.unknown');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
  const translatePrograms = (programs) => {
    if (!programs) return '-';
    const programKeys = Array.isArray(programs) ? programs : [programs];
    const translated = programKeys.map(program => {
      const key = `publicQueueForm.programs.bachelor.${program}`; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      let translatedText = t(key);
      if (translatedText === key) {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –∏ –¥–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä—É
        const masterKey = `publicQueueForm.programs.master.${program}`;
        const doctorateKey = `publicQueueForm.programs.doctorate.${program}`;
        translatedText = t(masterKey) !== masterKey ? t(masterKey) : t(doctorateKey) !== doctorateKey ? t(doctorateKey) : program;
      }
      return translatedText;
    });
    return translated.join(', ');
  };

  if (loading) return <div className="employee-status-loading">{t('employeeStatus.loading')}</div>;
  if (!status) return <div className="employee-status-error">{t('employeeStatus.errorLoading')}</div>;

  return (
    <div className="employee-status-control">
      <div className="status-header">
        <h3>{t('employeeStatus.title')}</h3>
        <div className={`status-indicator status-${status.status}`}>
          {getStatusText(status.status)}
        </div>
      </div>

      {error && (
        <div className="alert alert-danger">
          {error}
        </div>
      )}

      {calledApplicant && (
        <div className="called-applicant">
          <h4>{t('admissionDashboard.currentApplicant')}:</h4>
          <div className="applicant-info">
            <p><strong>{t('admissionDashboard.number')}:</strong> {calledApplicant.queue_number}</p>
            <p><strong>{t('admissionDashboard.fullName')}:</strong> {calledApplicant.full_name}</p>
            <p><strong>{t('admissionDashboard.phone')}:</strong> {calledApplicant.phone}</p>
            <p><strong>{t('admissionDashboard.desk')}:</strong> {calledApplicant.employee_desk}</p>
            <p><strong>{t('admissionDashboard.program')}:</strong> {translatePrograms(calledApplicant.programs)}</p>
            <p><strong>{t('admissionDashboard.announcement')}:</strong> 
              {t('admissionDashboard.announcementTemplate', {
                queue: calledApplicant.queue_number,
                desk: calledApplicant.employee_desk
              })}
            </p>
          </div>
        </div>
      )}

      <div className="status-actions">
        {status.status === 'offline' && (
          <button className="btn btn-success" onClick={handleStartWork} disabled={actionLoading}>
            {actionLoading ? t('employeeStatus.starting') : t('employeeStatus.startWork')}
          </button>
        )}

        {status.status === 'available' && !calledApplicant && (
          <>
            <button className="btn btn-info" onClick={handleCallNext} disabled={actionLoading}>
              {actionLoading ? t('employeeStatus.calling') : t('employeeStatus.callNext')}
            </button>
            <button className="btn btn-warning" onClick={handlePauseWork} disabled={actionLoading}>
              {t('employeeStatus.pauseWork')}
            </button>
            <button className="btn btn-secondary" onClick={handleFinishWork} disabled={actionLoading}>
              {t('employeeStatus.finishWork')}
            </button>
          </>
        )}

        {/* üî• –ù–û–í–´–ô –ë–õ–û–ö: –ö–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ */}
        {(status.status === 'busy' || calledApplicant) && (
          <div className="current-applicant-actions">
            <button className="btn btn-success" onClick={handleCompleteApplicant} disabled={actionLoading}>
              {t('admissionDashboard.completeCurrent')}
            </button>
            <button className="btn btn-warning" onClick={handlePauseWork} disabled={actionLoading}>
              {t('admissionDashboard.pauseAfterComplete')}
            </button>
          </div>
        )}

        {status.status === 'paused' && (
          <div className="paused-actions">
            <p className="pause-info">{t('employeeStatus.pausedMessage')}</p>
            <button className="btn btn-primary" onClick={handleResumeWork} disabled={actionLoading}>
              {t('employeeStatus.resumeWork')}
            </button>
            <button
              className="btn btn-secondary"
              onClick={handleFinishWork}
              disabled={actionLoading}
            >
              {t('employeeStatus.finishWork')}
            </button>
          </div>
        )}
      </div>

      {/* –ê—É–¥–∏–æ–ø–ª–µ–µ—Ä –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º audioId –∫–∞–∫ key */}
      {audioData && audioData.audio_base64 && (
        <AudioPlayer
          key={audioData.audioId} // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π key –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
          audioBase64={audioData.audio_base64}
          onEnded={handleAudioEnded}
          autoPlay={true}
        />
      )}
    </div>
  );
};

export default EmployeeStatusControl;
