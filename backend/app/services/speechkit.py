import httpx
import base64
from app.config import settings

# –ì–æ–ª–æ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –≤ Google Cloud TTS
VOICE_CONFIG = {
    'ru': {
        'languageCode': 'ru-RU',
        'name': 'ru-RU-Wavenet-C',
        'ssmlGender': 'FEMALE'
    },
    'kk': {
        # –ü—Ä–æ–±—É–µ–º Neural2 –≥–æ–ª–æ—Å–∞ - –æ–Ω–∏ –Ω–æ–≤–µ–µ
        'languageCode': 'kk-KZ',
        'name': 'kk-KZ-Neural2-A',
        'ssmlGender': 'FEMALE'
    },
    'en': {
        'languageCode': 'en-US',
        'name': 'en-US-Wavenet-F',
        'ssmlGender': 'FEMALE'
    }
}

# –ó–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ
KAZAKH_FALLBACK_VOICES = [
    {'name': 'kk-KZ-Neural2-A', 'gender': 'FEMALE'},
    {'name': 'kk-KZ-Neural2-B', 'gender': 'MALE'},
    {'name': 'kk-KZ-Wavenet-A', 'gender': 'FEMALE'},
    {'name': 'kk-KZ-Standard-A', 'gender': 'FEMALE'},
    {'name': 'kk-KZ-Standard-B', 'gender': 'MALE'},
]

# –®–∞–±–ª–æ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏
ANNOUNCEMENT_TEMPLATES = {
    'ru': "–¢–∞–ª–æ–Ω –Ω–æ–º–µ—Ä {queue_number}, –ø—Ä–æ–π–¥–∏—Ç–µ –∫ —Å—Ç–æ–ª—É {desk}",
    'kk': "–¢–∞–ª–æ–Ω –Ω”©–º—ñ—Ä—ñ {queue_number}, {desk} “Ø—Å—Ç–µ–ª—ñ–Ω–µ ”©—Ç—ñ“£—ñ–∑", 
    'en': "Ticket number {queue_number}, please proceed to desk {desk}"
}

async def generate_speech(
    queue_number: int,
    full_name: str,
    desk: str,
    language: str = 'ru'
) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—á—å —á–µ—Ä–µ–∑ Google Cloud Text-to-Speech
    """
    try:
        print(f"üé§ Google TTS: –Ω–æ–º–µ—Ä {queue_number}, {full_name}, —Å—Ç–æ–ª {desk}, —è–∑—ã–∫ {language}")
        
        if not settings.GOOGLE_TTS_API_KEY:
            return {
                'success': False,
                'audio_base64': None,
                'text': '',
                'language': language,
                'error': 'Google API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        if language not in VOICE_CONFIG:
            language = 'ru'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        template = ANNOUNCEMENT_TEMPLATES.get(language, ANNOUNCEMENT_TEMPLATES['ru'])
        text = template.format(
            queue_number=queue_number,
            full_name=full_name,
            desk=desk
        )
        
        print(f"üìù –¢–µ–∫—Å—Ç: {text}")
        
        # URL —Å API –∫–ª—é—á–æ–º
        url = f"https://texttospeech.googleapis.com/v1/text:synthesize?key={settings.GOOGLE_TTS_API_KEY}"
        
        # –î–ª—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        if language == 'kk':
            for voice_option in KAZAKH_FALLBACK_VOICES:
                print(f"üîÑ –ü—Ä–æ–±—É–µ–º –∫–∞–∑–∞—Ö—Å–∫–∏–π –≥–æ–ª–æ—Å: {voice_option['name']}")
                
                request_data = {
                    "input": {"text": text},
                    "voice": {
                        "languageCode": 'kk-KZ',
                        "name": voice_option['name'],
                        "ssmlGender": voice_option['gender']
                    },
                    "audioConfig": {
                        "audioEncoding": "MP3",
                        "speakingRate": 1.0
                    }
                }
                
                try:
                    async with httpx.AsyncClient() as client:
                        response = await client.post(url, json=request_data, timeout=30.0)
                    
                    print(f"üì° –û—Ç–≤–µ—Ç Google –¥–ª—è {voice_option['name']}: {response.status_code}")
                    
                    if response.status_code == 200:
                        result = response.json()
                        audio_base64 = result.get('audioContent', '')
                        print(f"‚úÖ –ö–∞–∑–∞—Ö—Å–∫–∏–π –≥–æ–ª–æ—Å {voice_option['name']} —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–∞–∑–º–µ—Ä: {len(audio_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        return {
                            'success': True,
                            'audio_base64': audio_base64,
                            'text': text,
                            'language': language,
                            'error': None
                        }
                    else:
                        print(f"‚ùå –ì–æ–ª–æ—Å {voice_option['name']} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                        
                except Exception as e:
                    print(f"üí• –û—à–∏–±–∫–∞ —Å –≥–æ–ª–æ—Å–æ–º {voice_option['name']}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∫–∞–∑–∞—Ö—Å–∫–∏–π –≥–æ–ª–æ—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            print("‚ùå –í—Å–µ –∫–∞–∑–∞—Ö—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π")
            language = 'ru'
        
        # –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∏–ª–∏ fallback
        voice_config = VOICE_CONFIG[language]
        request_data = {
            "input": {"text": text},
            "voice": {
                "languageCode": voice_config['languageCode'],
                "name": voice_config['name'],
                "ssmlGender": voice_config['ssmlGender']
            },
            "audioConfig": {
                "audioEncoding": "MP3",
                "speakingRate": 1.0
            }
        }
        
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google TTS...")
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=request_data, timeout=30.0)
        
        print(f"üì° –û—Ç–≤–µ—Ç Google: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            audio_base64 = result.get('audioContent', '')
            
            print(f"‚úÖ Google TTS —É—Å–ø–µ—Ö! –†–∞–∑–º–µ—Ä: {len(audio_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return {
                'success': True,
                'audio_base64': audio_base64,
                'text': text,
                'language': language,
                'error': None
            }
        else:
            error_text = response.text
            print(f"‚ùå Google TTS –æ—à–∏–±–∫–∞: {response.status_code} - {error_text}")
            return {
                'success': False,
                'audio_base64': None,
                'text': text,
                'language': language,
                'error': f"Google API Error: {response.status_code}"
            }
            
    except Exception as e:
        print(f"üí• Google TTS exception: {e}")
        return {
            'success': False,
            'audio_base64': None,
            'text': text if 'text' in locals() else '',
            'language': language,
            'error': str(e)
        }