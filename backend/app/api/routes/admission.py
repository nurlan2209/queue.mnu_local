from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List, Union
import logging

from app.database import get_db
from app.models.user import User, EmployeeStatus  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç EmployeeStatus
from app.models.queue import QueueEntry, QueueStatus
from app.schemas import QueueResponse, QueueUpdate, UserResponse  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç UserResponse
from app.security import get_admission_user
from app.services.queue import update_queue_entry, get_all_queue_entries, start_processing_time, end_processing_time
from app.services.speechkit import generate_speech  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º Yandex SpeechKit

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter(tags=["admission"])

@router.post("/finish-work", response_model=UserResponse)
def finish_work(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admission_user)
):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–ø–µ—Ä–µ–π—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å offline)"""
    logger.info(f"User {current_user.id} finishing work")
    
    # –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–Ω—è—Ç —Å –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–º, —Å–Ω–∞—á–∞–ª–∞ –æ—Å–≤–æ–±–æ–¥–∏–º –µ–≥–æ
    if current_user.status in [EmployeeStatus.BUSY.value, EmployeeStatus.PAUSED.value]:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        current_entry = db.query(QueueEntry).filter(
            QueueEntry.status == QueueStatus.IN_PROGRESS,
            QueueEntry.assigned_employee_name == current_user.full_name
        ).first()
        
        if current_entry:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞, –º–µ–Ω—è–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å –Ω–∞ COMPLETED
            current_entry.status = QueueStatus.COMPLETED
            end_processing_time(db, current_entry.id)
            db.add(current_entry)
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ OFFLINE
    current_user.status = EmployeeStatus.OFFLINE.value
    
    db.commit()
    db.refresh(current_user)
    
    logger.info(f"Employee {current_user.id} has finished work and is now OFFLINE")
    
    return current_user

# –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@router.post("/start-work", response_model=UserResponse)
def start_work(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admission_user)
):
    """–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É (–æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π)"""
    logger.info(f"User {current_user.id} starting work")
    
    current_user.status = EmployeeStatus.AVAILABLE.value
    db.commit()
    db.refresh(current_user)
    
    return current_user

@router.post("/pause-work", response_model=UserResponse)
def pause_work(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admission_user)
):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É (—É–π—Ç–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤)"""
    logger.info(f"User {current_user.id} pausing work")
    
    current_user.status = EmployeeStatus.PAUSED.value
    db.commit()
    db.refresh(current_user)
    
    return current_user

@router.post("/resume-work", response_model=UserResponse)
def resume_work(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admission_user)
):
    """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞"""
    logger.info(f"User {current_user.id} resuming work")
    
    current_user.status = EmployeeStatus.AVAILABLE.value
    db.commit()
    db.refresh(current_user)
    
    return current_user

@router.post("/call-next")
async def call_next_applicant(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admission_user)
):
    """–í—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ–∑–≤—É—á–∫–æ–π"""
    logger.info(f"User {current_user.id} calling next applicant")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
    if current_user.status != EmployeeStatus.AVAILABLE.value:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="You must be available to call next applicant"
        )
    
    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    next_entry = db.query(QueueEntry).filter(
        QueueEntry.status == QueueStatus.WAITING,
        QueueEntry.assigned_employee_name == current_user.full_name
    ).order_by(QueueEntry.queue_number).first()
    
    if not next_entry:
        logger.warning(f"No applicants assigned to employee {current_user.full_name}")
        return {
            "message": "–ù–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –≤–∞—Å.",
            "status": "empty_queue",
            "success": False
        }
    
    # –°–ù–ê–ß–ê–õ–ê –ì–ï–ù–ï–†–ò–†–£–ï–ú –ê–£–î–ò–û
    desk = current_user.desk or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    language = next_entry.form_language or 'ru'
    
    logger.info(f"üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å –¥–ª—è: –Ω–æ–º–µ—Ä {next_entry.queue_number}, {next_entry.full_name}, —Å—Ç–æ–ª {desk}, —è–∑—ã–∫ {language}")
    
    speech_result = await generate_speech(
        queue_number=next_entry.queue_number,
        full_name=next_entry.full_name,
        desk=desk,
        language=language
    )
    
    logger.info(f"‚úÖ Speech generation result: {speech_result['success']}")
    
    # –ü–û–¢–û–ú –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    next_entry.status = QueueStatus.IN_PROGRESS
    current_user.status = EmployeeStatus.BUSY.value
    
    start_processing_time(db, next_entry.id)
    
    db.commit()
    db.refresh(next_entry)
    db.refresh(current_user)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∞—É–¥–∏–æ
    response_data = {
        "id": next_entry.id,
        "queue_number": next_entry.queue_number,
        "full_name": next_entry.full_name,
        "phone": next_entry.phone,
        "programs": next_entry.programs,
        "status": next_entry.status,
        "notes": next_entry.notes,
        "created_at": next_entry.created_at,
        "updated_at": next_entry.updated_at,
        "assigned_employee_name": next_entry.assigned_employee_name,
        "processing_time": next_entry.processing_time,
        "form_language": next_entry.form_language,
        "employee_desk": desk,
        "speech": speech_result,
        "success": True  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú success: True
    }
    
    logger.info(f"Queue entry {next_entry.id} moved to IN_PROGRESS, employee now BUSY")
    
    return response_data

@router.post("/complete-current", response_model=UserResponse)
def complete_current_applicant(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admission_user)
):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—É—â–∏–º –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–º"""
    logger.info(f"User {current_user.id} completing current applicant")
    
    # üî• –ò–°–ü–†–ê–í–õ–Ø–ï–ú –õ–û–ì–ò–ö–£: –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ BUSY –∏ PAUSED
    if current_user.status not in [EmployeeStatus.BUSY.value, EmployeeStatus.PAUSED.value]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="You must be busy with an applicant or paused to complete"
        )
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    current_entry = db.query(QueueEntry).filter(
        QueueEntry.status == QueueStatus.IN_PROGRESS,
        QueueEntry.assigned_employee_name == current_user.full_name
    ).first()
    
    if not current_entry:
        logger.warning(f"No active entry found for employee {current_user.full_name}")
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="No active applicant found to complete"
        )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞—è–≤–∫—É
    current_entry.status = QueueStatus.COMPLETED
    end_processing_time(db, current_entry.id)
    db.add(current_entry)
    
    # üéØ –í–ê–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    # –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –±—ã–ª –Ω–∞ –ø–∞—É–∑–µ - –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –ø–∞—É–∑–µ
    # –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –±—ã–ª busy - —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è available
    if current_user.status == EmployeeStatus.PAUSED.value:
        new_status = EmployeeStatus.PAUSED.value
        logger.info(f"Employee {current_user.id} remains PAUSED after completing applicant")
    else:
        new_status = EmployeeStatus.AVAILABLE.value
        logger.info(f"Employee {current_user.id} becomes AVAILABLE after completing applicant")
    
    current_user.status = new_status
    
    db.commit()
    db.refresh(current_entry)
    db.refresh(current_user)
    
    return current_user

@router.get("/status", response_model=UserResponse)
def get_employee_status(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admission_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    return current_user

# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@router.get("/queue", response_model=List[QueueResponse])
def list_queue(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admission_user),
    status: QueueStatus = None
):
    """Get queue entries assigned to the current user (for admission staff)"""
    logger.info(f"User {current_user.id} retrieving their queue with status {status}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏, —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    query = db.query(QueueEntry).filter(
        QueueEntry.assigned_employee_name == current_user.full_name
    )
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ç—É—Å, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–µ–º—É
    if status:
        query = query.filter(QueueEntry.status == status)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    query = query.order_by(QueueEntry.queue_number)
    
    return query.all()

@router.post("/next", response_model=QueueResponse)
def process_next_in_queue(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admission_user)
):
    """Move the next waiting applicant to in-progress status"""
    logger.info(f"User {current_user.id} processing next queue entry")
    
    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    next_entry = db.query(QueueEntry).filter(
        QueueEntry.status == QueueStatus.WAITING,
        QueueEntry.assigned_employee_name == current_user.full_name
    ).order_by(QueueEntry.queue_number).first()
    
    if not next_entry:
        logger.warning(f"No applicants assigned to employee {current_user.full_name}")
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="No applicants assigned to you in the queue"
        )
    
    next_entry.status = QueueStatus.IN_PROGRESS
    current_user.status = EmployeeStatus.BUSY.value
    
    db.commit()
    db.refresh(next_entry)
    db.refresh(current_user)
    
    logger.info(f"Queue entry {next_entry.id} moved to IN_PROGRESS")
    
    return next_entry

@router.put("/queue/{queue_id}", response_model=QueueResponse)
def update_queue_status(
    queue_id: str,
    queue_update: QueueUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admission_user)
):
    """Update queue entry status (for admission staff)"""
    logger.info(f"User {current_user.id} updating queue entry {queue_id}")
    queue_entry = db.query(QueueEntry).filter(QueueEntry.id == queue_id).first()
    
    if not queue_entry:
        logger.warning(f"Queue entry {queue_id} not found")
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Queue entry not found"
        )
    
    return update_queue_entry(db, queue_entry, queue_update)

@router.delete("/queue/{queue_id}", response_model=QueueResponse)
def delete_queue_entry(
    queue_id: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_admission_user)
):
    """Delete a queue entry (for admission staff)"""
    logger.info(f"User {current_user.id} attempting to delete queue entry {queue_id}")
    queue_entry = db.query(QueueEntry).filter(QueueEntry.id == queue_id).first()
    
    if not queue_entry:
        logger.warning(f"Queue entry {queue_id} not found")
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Queue entry not found"
        )
    
    db.delete(queue_entry)
    db.commit()
    logger.info(f"Queue entry {queue_id} deleted successfully")
    return queue_entry