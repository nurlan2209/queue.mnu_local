# app/api/routes/public.py
from fastapi import APIRouter, Depends, HTTPException, Request, Query
from sqlalchemy.orm import Session
from sqlalchemy import func, desc
from typing import List
from datetime import datetime
from app.database import get_db
from app.models.queue import QueueEntry, QueueStatus
from app.models.user import User
from app.schemas.queue import PublicQueueCreate, QueueResponse, PublicQueueResponse
from app.services.captcha import verify_captcha
from app.services.queue import create_queue_entry, get_queue_count
from app.models.video import VideoSettings
from app.schemas.video import VideoSettingsResponse

router = APIRouter(prefix="/public")

@router.get("/display-queue", response_model=List[dict])
def get_display_queue(db: Session = Depends(get_db)):
    """Get queue entries for public display (no auth required)"""
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_progress'
    entries = db.query(QueueEntry).filter(
        QueueEntry.status == QueueStatus.IN_PROGRESS
    ).all()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–µ
    result = []
    for entry in entries:
        entry_dict = {
            "id": entry.id,
            "queue_number": entry.queue_number,
            "status": entry.status,
            "assigned_employee_name": entry.assigned_employee_name,
            "employee_desk": None,
            "programs": entry.programs 
        }
        
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if entry.assigned_employee_name:
            employee = db.query(User).filter(User.full_name == entry.assigned_employee_name).first()
            if employee and employee.desk:
                entry_dict["employee_desk"] = employee.desk
        
        result.append(entry_dict)
    
    return result

@router.get("/employees", response_model=List[dict])
def get_employees(db: Session = Depends(get_db)):
    """Get all admission employees that are currently online (public endpoint)"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ admission, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ offline
    online_employees = db.query(User).filter(
        User.role == "admission",
        User.status != "offline"  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º offline
    ).all()
    
    if not online_employees:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        return []
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—å—é admission, –∫–æ—Ç–æ—Ä—ã–µ online
    return [{"name": emp.full_name, "status": emp.status, "desk": emp.desk} for emp in online_employees]

@router.post("/queue", response_model=QueueResponse)
def add_to_queue(
    queue_data: PublicQueueCreate,
    request: Request,
    db: Session = Depends(get_db)
):
    """Add applicant to the queue (public endpoint) with automatic employee assignment"""
    print(f"üöÄ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {queue_data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É
    captcha_valid = verify_captcha(queue_data.captcha_token, request.client.host)
    if not captcha_valid:
        print("‚ùå –ö–∞–ø—á–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
        raise HTTPException(status_code=400, detail="Invalid captcha")
    
    print("‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∏ —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    existing_entry = db.query(QueueEntry).filter(
        QueueEntry.phone == queue_data.phone,
        QueueEntry.status.in_([QueueStatus.WAITING, QueueStatus.IN_PROGRESS])
    ).first()
    
    if existing_entry:
        print(f"‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_entry.id}")
        raise HTTPException(status_code=400, detail="–í—ã —É–∂–µ —Å—Ç–æ–∏—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
    
    # –£–ë–ò–†–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –°–û–¢–†–£–î–ù–ò–ö–ê - —Ç–µ–ø–µ—Ä—å –æ–Ω –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    # –ù–ï –ü–†–û–í–ï–†–Ø–ï–ú queue_data.assigned_employee_name
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    try:
        result = create_queue_entry(db, queue_data)
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {result.id}, –Ω–æ–º–µ—Ä: {result.queue_number}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {result.assigned_employee_name}")
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"Error creating queue entry: {str(e)}")

@router.get("/queue/check", response_model=PublicQueueResponse)
def check_queue_by_name(
    full_name: str = Query(..., description="–§–ò–û –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"),
    db: Session = Depends(get_db)
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –ø–æ –§–ò–û –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞"""
    
    # –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏
    queue_entry = db.query(QueueEntry).filter(
        QueueEntry.full_name == full_name
    ).order_by(desc(QueueEntry.created_at)).first()
    
    if not queue_entry:
        raise HTTPException(
            status_code=404,
            detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –∫–æ–ª-–≤–æ –ª—é–¥–µ–π –≤–ø–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
    position = None
    people_ahead = None
    estimated_time = None
    
    if queue_entry.status == QueueStatus.WAITING:
        # –ü–æ–∑–∏—Ü–∏—è = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º WAITING –∏ —Å –º–µ–Ω—å—à–∏–º –Ω–æ–º–µ—Ä–æ–º + 1
        position = db.query(QueueEntry).filter(
            QueueEntry.status == QueueStatus.WAITING,
            QueueEntry.queue_number < queue_entry.queue_number
        ).count() + 1
        
        # –ö–æ–ª-–≤–æ –ª—é–¥–µ–π –≤–ø–µ—Ä–µ–¥–∏ = –ø–æ–∑–∏—Ü–∏—è - 1
        people_ahead = position - 1
        
        # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 5 –º–∏–Ω—É—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
        estimated_time = people_ahead * 5
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    response = PublicQueueResponse.from_orm(queue_entry)
    response.position = position
    response.people_ahead = people_ahead
    response.estimated_time = estimated_time
    
    return response

@router.delete("/queue/cancel/{queue_id}", response_model=QueueResponse)
def cancel_queue_by_id(
    queue_id: str,
    db: Session = Depends(get_db)
):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –ø–æ ID"""
    
    queue_entry = db.query(QueueEntry).filter(
        QueueEntry.id == queue_id,
        QueueEntry.status.in_([QueueStatus.WAITING, QueueStatus.IN_PROGRESS])
    ).first()
    
    if not queue_entry:
        raise HTTPException(
            status_code=404,
            detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        )
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ COMPLETED (–æ—Ç–º–µ–Ω–µ–Ω–æ)
    queue_entry.status = QueueStatus.COMPLETED
    db.commit()
    db.refresh(queue_entry)
    
    return queue_entry

@router.put("/queue/move-back/{queue_id}", response_model=PublicQueueResponse)
def move_back_in_queue(
    queue_id: str,
    db: Session = Depends(get_db)
):
    """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏"""
    
    queue_entry = db.query(QueueEntry).filter(
        QueueEntry.id == queue_id,
        QueueEntry.status == QueueStatus.WAITING
    ).first()
    
    if not queue_entry:
        raise HTTPException(
            status_code=404,
            detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è"
        )
    
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏
    last_entry = db.query(func.max(QueueEntry.queue_number)).scalar()
    next_number = last_entry + 1 if last_entry else 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏
    queue_entry.queue_number = next_number
    db.commit()
    db.refresh(queue_entry)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –∫–æ–ª-–≤–æ –ª—é–¥–µ–π –≤–ø–µ—Ä–µ–¥–∏
    position = db.query(QueueEntry).filter(
        QueueEntry.status == QueueStatus.WAITING,
        QueueEntry.queue_number < queue_entry.queue_number
    ).count() + 1
    
    people_ahead = position - 1
    estimated_time = people_ahead * 5
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    response = PublicQueueResponse.from_orm(queue_entry)
    response.position = position
    response.people_ahead = people_ahead
    response.estimated_time = estimated_time
    
    return response

@router.get("/queue/count")
def get_queue_count_endpoint(db: Session = Depends(get_db)):  # –£–¥–∞–ª–∏—Ç–µ async
    return {"count": get_queue_count(db)}

@router.get("/video-settings", response_model=VideoSettingsResponse)
def get_public_video_settings(db: Session = Depends(get_db)):
    """Get current video settings for public display"""
    settings = db.query(VideoSettings).first()
    if not settings:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç
        return VideoSettingsResponse(
            id=0,
            youtube_url="",
            is_enabled=False,
            created_at=datetime.now(),
            updated_at=None
        )
    return settings