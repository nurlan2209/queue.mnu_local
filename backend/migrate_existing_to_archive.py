#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –≤ –∞—Ä—Ö–∏–≤
–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.database import SessionLocal, engine
from app.models.queue import QueueEntry
from app.models.archive import ArchivedQueueEntry, ArchiveQueueStatus
from sqlalchemy.orm import Session
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_all_to_archive():
    """–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞—è–≤–∫–∏ –≤ –∞—Ä—Ö–∏–≤"""
    db = SessionLocal()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        all_entries = db.query(QueueEntry).all()
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(all_entries)} –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ –∞—Ä—Ö–∏–≤")
        
        migrated_count = 0
        
        for entry in all_entries:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤ –∞—Ä—Ö–∏–≤–µ
                existing = db.query(ArchivedQueueEntry).filter(
                    ArchivedQueueEntry.original_id == entry.id
                ).first()
                
                if existing:
                    logger.info(f"–ó–∞—è–≤–∫–∞ {entry.id} —É–∂–µ –µ—Å—Ç—å –≤ –∞—Ä—Ö–∏–≤–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∞—Ä—Ö–∏–≤–µ
                archived_entry = ArchivedQueueEntry(
                    original_id=entry.id,
                    queue_number=entry.queue_number,
                    full_name=entry.full_name,
                    phone=entry.phone,
                    programs=entry.programs,
                    status=ArchiveQueueStatus(entry.status.value),
                    notes=entry.notes,
                    assigned_employee_name=entry.assigned_employee_name,
                    created_at=entry.created_at,
                    updated_at=entry.updated_at,
                    completed_at=entry.updated_at if entry.status.value == 'COMPLETED' else None,
                    processing_time=entry.processing_time,
                    form_language=entry.form_language,
                    archive_reason="initial_migration"
                )
                
                db.add(archived_entry)
                migrated_count += 1
                
                logger.info(f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∑–∞—è–≤–∫–∞ {entry.id} (#{entry.queue_number}) - {entry.full_name}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞—è–≤–∫–∏ {entry.id}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {migrated_count} –∑–∞—è–≤–æ–∫ –≤ –∞—Ä—Ö–∏–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_in_archive = db.query(ArchivedQueueEntry).count()
        total_in_queue = db.query(QueueEntry).count()
        
        logger.info(f"üìä –ò—Ç–æ–≥–æ –≤ –∞—Ä—Ö–∏–≤–µ: {total_in_archive}")
        logger.info(f"üìä –ò—Ç–æ–≥–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ: {total_in_queue}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –≤ –∞—Ä—Ö–∏–≤...")
    migrate_all_to_archive()
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")